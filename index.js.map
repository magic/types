{"version":3,"sources":["src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n\ntype Test = (ele: any, types: string | Array<string>, ...addTypes: Array<string>) => boolean\ntype TestWithTypes = (ele : any, ...types : Array<string>) => boolean\ntype TestWithoutTypes = (ele : any) => boolean\ntype ToNumber = (ele : any) => number\n\ntype ArrayOfStringsOrString = Array<string> | string\n\nexport const test : Test =\n  (ele : any, types : ArrayOfStringsOrString, ...addTypes : Array<string>) : boolean => {\n    if (isString(types) && isEmpty(addTypes)) {\n      return Object.prototype.toString(ele) === types || typeof ele === types\n    }\n\n    return addTypes\n      .concat(types)\n      .some(\n        (t : string) : boolean =>\n          test(ele, t)\n      )\n  }\n\nexport const is : TestWithTypes =\n  (ele : any, ...types : Array<string>) : boolean =>\n    test(ele, types)\n\nexport const not : TestWithTypes =\n  (ele : any, ...types: Array<string>) : boolean =>\n    !test(ele, types)\n\nexport const isArray : TestWithoutTypes =\n  (ele : any) : boolean =>\n    isTruthy(ele) &&\n    isFunction(ele.forEach)\n\nexport const isBoolean : TestWithoutTypes =\n  (ele : any) : boolean =>\n    typeof ele === 'boolean'\n\nexport const isDefined : TestWithoutTypes =\n  (ele : any) : boolean =>\n    typeof ele !== 'undefined'\n\nexport const isFunction : TestWithoutTypes =\n  (ele : any) : boolean =>\n    typeof ele === 'function'\n\nexport const isNumber : TestWithoutTypes =\n  (ele : any) : boolean =>\n    ele === +ele\n\nexport const isInteger : TestWithoutTypes =\n  (ele : any) : boolean =>\n    ele === +ele &&\n    ele === (ele | 0)\n\nexport const isFloat : TestWithoutTypes =\n  (ele : any) : boolean =>\n    ele === +ele\n\nexport const isObject : TestWithoutTypes =\n  (ele : any) : boolean =>\n    typeof ele === 'object'\n\nexport const isString : TestWithoutTypes =\n  (ele : any) : boolean =>\n    typeof ele === 'string'\n\nexport const isRGBAObject : TestWithoutTypes =\n  (e : any) : boolean =>\n    isObject(e) &&\n    isNumber(e.r) &&\n    isNumber(e.g) &&\n    isNumber(e.b) &&\n    isNumber(e.a)\n\nexport const isRGBObject : TestWithoutTypes =\n  (e : any) : boolean =>\n    isObject(e) &&\n    isNumber(e.r) &&\n    isNumber(e.g) &&\n    isNumber(e.b)\n\nexport const isHexColor : TestWithoutTypes =\n  (c : any) : boolean =>\n    /\\#\\b([a-f0-9]{3}|[a-f0-9]{6}|[a-f0-9]{4}|[a-f0-9]{8})\\b/i.test(c)\n\nexport const isHexAlphaColor : TestWithoutTypes =\n  (c : any) : boolean =>\n    /\\#\\b([a-f0-9]{4}|[a-f0-9]{8})\\b/i.test(c)\n\nexport const isColor : TestWithoutTypes =\n  (e : any) : boolean =>\n    isRGBAObject(e) ||\n    isRGBObject(e) ||\n    isHexColor(e) ||\n    isHexAlphaColor(e)\n\nexport const isDate : TestWithoutTypes =\n  (ele : any) : boolean =>\n    ele.constructor === Date\n\nexport const isTruthy : TestWithoutTypes =\n  (ele : any) : boolean =>\n    !!ele\n\nexport const isFalsy : TestWithoutTypes =\n  (ele : any) : boolean =>\n    !ele ||\n    isEmpty(ele)\n\nexport const isEmpty : TestWithoutTypes =\n  (ele : any) : boolean =>\n    !ele ||\n    isObject(ele) && Object.keys(ele).length === 0 ||\n    false\n\nexport const isError : TestWithoutTypes =\n  (ele : any) : boolean =>\n    Object.getPrototypeOf(ele).name === 'Error'\n\nexport const isIterable : TestWithoutTypes =\n  (ele : any) : boolean =>\n    typeof ele === 'object'\n\nexport const isEmail : TestWithoutTypes =\n  (ele : any) : boolean =>\n    typeof ele === 'string' &&\n    ele.indexOf('@') > 0\n\nexport const toInt : ToNumber =\n  (ele : any) : number => {\n    if (!isNumber(ele)) {\n      return 0\n    }\n\n    return ele | 0\n  }\n\nexport const toFloat : ToNumber =\n  (ele : any) : number => {\n    if (!isNumber(ele)) {\n      return 0\n    }\n\n    return parseFloat(ele, 10)\n  }\n\nexport const toString : (ele : any) => string =\n  (ele : any) : string => {\n    if (isString(ele)) {\n      return ele\n    }\n\n    if (ele && isFunction(ele.toString)) {\n      return ele.toString()\n    }\n\n    return ele + ''\n  }\n"]}