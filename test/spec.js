const types = require('../src')

const fn = {
  isArray: [
    { fn: () => types.isArray(['test', 'test2']), expect: true },
    { fn: () => types.isArray(['test']), expect: true },
    { fn: () => types.isArray([]), expect: true },
    { fn: () => types.isArray(1), expect: false },
    { fn: () => types.isArray('string'), expect: false },
    { fn: () => types.isArray(''), expect: false },
  ],
  isBoolean: [
    { fn: () => types.isBoolean(true), expect: true },
    { fn: () => types.isBoolean(false), expect: true },
    { fn: () => types.isBoolean(0), expect: false },
    { fn: () => types.isBoolean(1), expect: false },
    { fn: () => types.isBoolean('true'), expect: false },
  ],
  isDefined: [
    { fn: () => types.isDefined([1,2,3]), expect: true },
    { fn: () => types.isDefined(true), expect: true },
    { fn: () => types.isDefined(false), expect: true },
    { fn: () => types.isDefined('true'), expect: true },
    { fn: () => types.isDefined(0), expect: true },
    { fn: () => types.isDefined(''), expect: true },
    { fn: () => types.isDefined({}), expect: true },
    { fn: () => types.isDefined([]), expect: true },
    { fn: () => types.isDefined(() => {}), expect: true },
    { fn: () => types.isDefined(1.1), expect: true },
    { fn: () => types.isDefined(0), expect: true },
    { fn: () => types.isDefined({ t: 't' }), expect: true },
    { fn: () => types.isDefined('string'), expect: true },
    { fn: () => types.isDefined('m@m.m'), expect: true },
    { fn: () => types.isDefined(/test/), expect: true },
    { fn: () => types.isDefined(null), expect: true },
    { fn: () => types.isDefined(new Date()), expect: true },
    { fn: () => types.isDefined(new Error('test')), expect: true },
  ],
  isFunction: [
    { fn: () => types.isFunction(() => {}), expect: true },
    { fn: () => types.isFunction(function () {}), expect: true },
    { fn: () => types.isFunction(0), expect: false },
    { fn: () => types.isFunction(true), expect: false },
    { fn: () => types.isFunction([1,2,3]), expect: false },
    { fn: () => types.isFunction({ t: 't' }), expect: false },
  ],
  isNumber: [
    { fn: () => types.isNumber(1), expect: true },
    { fn: () => types.isNumber(1.1), expect: true },
    { fn: () => types.isNumber(Infinity), expect: true },
    { fn: () => types.isNumber([1,2,3]), expect: false },
    { fn: () => types.isNumber([]), expect: false },
    { fn: () => types.isNumber({}), expect: false },
    { fn: () => types.isNumber({ t: 't' }), expect: false },
    { fn: () => types.isNumber('test'), expect: false },
    { fn: () => types.isNumber('test'), expect: false },
  ],
  isInteger: [
    { fn: () => types.isInteger(1), expect: true },
    { fn: () => types.isInteger(0), expect: true },
    { fn: () => types.isInteger(1000), expect: true },
    { fn: () => types.isInteger(1000.0), expect: true },
    { fn: () => types.isInteger(1000.1), expect: false },
    { fn: () => types.isInteger(1.1), expect: false },
    { fn: () => types.isInteger(0.0), expect: true },
  ],
  isFloat: [
    { fn: () => types.isFloat(1.1), expect: true },
    { fn: () => types.isFloat(0.0), expect: true },
    { fn: () => types.isFloat(1.0), expect: true },
    { fn: () => types.isFloat(1000.1), expect: true },
    { fn: () => types.isFloat(1), expect: true },
    { fn: () => types.isFloat(0), expect: true },
    { fn: () => types.isFloat('string'), expect: false },
    { fn: () => types.isFloat([]), expect: false },
    { fn: () => types.isFloat([1,2,3]), expect: false },
    { fn: () => types.isFloat({}), expect: false },
    { fn: () => types.isFloat({ t: 't' }), expect: false },
  ],
  isObject: [
    { fn: () => types.isObject([1,2,3]), expect: true },
    { fn: () => types.isObject([]), expect: true },
    { fn: () => types.isObject({}), expect: true },
    { fn: () => types.isObject({ t: 't' }), expect: true },
    { fn: () => types.isObject(/test/), expect: true },
    { fn: () => types.isObject(new Date()), expect: true },
    { fn: () => types.isObject(new Error('test')), expect: true },
    { fn: () => types.isObject('test'), expect: false },
    { fn: () => types.isObject(0), expect: false },
    { fn: () => types.isObject(new Date().getTime()), expect: false },
  ],
  isString: [
    { fn: () => types.isString('test'), expect: true },
    { fn: () => types.isString(''), expect: true },
    { fn: () => types.isString('true'), expect: true },
    { fn: () => types.isString('m@m.m'), expect: true },
    { fn: () => types.isString(0), expect: false },
    { fn: () => types.isString(1.2), expect: false },
    { fn: () => types.isString([]), expect: false },
    { fn: () => types.isString({}), expect: false },
    { fn: () => types.isString(new Error('test')), expect: false },
  ],
  isNull: [
    { fn: () => types.isNull(null), expect: true },
    { fn: () => types.isNull(false), expect: false },
    { fn: () => types.isNull(undefined), expect: false },
    { fn: () => types.isNull(), expect: false },
    { fn: () => types.isNull([]), expect: false },
    { fn: () => types.isNull({}), expect: false },
    { fn: () => types.isNull(0), expect: false },
  ],
  isUndefinedOrNull: [
    { fn: () => types.isUndefinedOrNull(null), expect: true },
    { fn: () => types.isUndefinedOrNull(undefined), expect: true },
    { fn: () => types.isUndefinedOrNull(), expect: true },
    { fn: () => types.isUndefinedOrNull([]), expect: false,}
  ],
}

module.exports = fn
