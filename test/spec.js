const t = require('../src')

const types = [
  t.isArray,
  t.array,
  t.isBoolean,
  t.boolean,
  t.isDefined,
  t.defined,
  t.isFunction,
  t.function,
  t.isNumber,
  t.number,
  t.isInteger,
  t.integer,
  t.isFloat,
  t.float,
  t.isObject,
  t.object,
  t.isString,
  t.string,
  t.isRGBAObject,
  t.rgbaObject,
  t.isRGBObject,
  t.rgbObject,
  t.isHexColor,
  t.hexColor,
  t.isHexAlphaColor,
  t.hexAlphaColor,
  t.isColor,
  t.color,
  t.isDate,
  t.date,
  t.isRegExp,
  t.RegExp,
  t.isTruthy,
  t.truthy,
  t.isFalsy,
  t.falsy,
  t.isEmpty,
  t.empty,
  t.isError,
  t.error,
  t.isIterable,
  t.iterable,
  t.isEmail,
  t.email,
  t.isNull,
  t.null,
  t.isUndefinedOrNull,
  t.undefinedOrNull,
  t.isBuffer,
  t.buffer,
  t.isThenable,
  t.thenable,
  t.isArguments,
  t.arguments,
  t.isUUID,
  t.uuid,
  t.testType,
  t.type,
  t.test,
  t.types,
  t.isEq,
  t.eq,
  t.is,
  t.isNot,
  t.not,
  t.isNeq,
  t.neq,
]

const equal = (...a) => () => !a.some(b => b.toString() !== a[0].toString())

const fns = [
  {
    fn: () => types.length,
    expect: Object.keys(t).length,
    info: 'Number of test functions is equal to lib functions',
  },
  {
    fn: () => types.filter(t.isFunction).length,
    expect: types.length,
    info: 'All exposed fields are functions',
  },
  {
    fn: () => t.isArray.toString(),
    expect: t.array.toString(),
    info: 't.isArray equals t.array',
  },
  {
    fn: equal(t.isArray, t.array),
    info: 't.isArray equals t.array',
  },
  {
    fn: equal(t.isBoolean, t.boolean),
    expect: true,
    info: 't.isBoolean equals t.boolean',
  },
  {
    fn: equal(t.isDefined, t.defined),
    expect: true,
    info: 't.isDefined equals t.defined',
  },
  {
    fn: equal(t.isFunction, t.function),
    expect: true,
    info: 't.isFunction equals t.function',
  },
  {
    fn: equal(t.isNumber, t.number),
    expect: true,
    info: 't.isNumber equals t.number',
  },
  {
    fn: equal(t.isInteger, t.integer),
    expect: true,
    info: 't.isInteger equals t.integer',
  },
  {
    fn: equal(t.isFloat, t.float),
    expect: true,
    info: 't.isFloat equals t.float',
  },
  {
    fn: equal(t.isObject, t.object),
    expect: true,
    info: 't.isObject equals t.object',
  },
  {
    fn: equal(t.isString, t.string),
    expect: true,
    info: 't.isString equals t.string',
  },
  {
    fn: equal(t.isRGBAObject, t.rgbaObject),
    expect: true,
    info: 't.isRGBAObject equals t.rgbaObject',
  },
  {
    fn: equal(t.isRGBObject, t.rgbObject),
    expect: true,
    info: 't.isRGBObject equals t.rgbObject',
  },
  {
    fn: equal(t.isHexColor, t.hexColor),
    expect: true,
    info: 't.isHexColor equals t.hexColor',
  },
  {
    fn: equal(t.isHexAlphaColor, t.hexAlphaColor),
    expect: true,
    info: 't.isHexAlphaColor equals t.hexAlphaColor',
  },
  {
    fn: equal(t.isColor, t.color),
    expect: true,
    info: 't.isColor equals t.color',
  },
  { fn: equal(t.isDate, t.date), expect: true, info: 't.isDate equals t.date' },
  {
    fn: equal(t.isRegExp, t.RegExp),
    expect: true,
    info: 't.isRegExp equals t.RegExp',
  },
  {
    fn: equal(t.isTruthy, t.truthy),
    expect: true,
    info: 't.isTruthy equals t.truthy',
  },
  {
    fn: equal(t.isFalsy, t.falsy),
    expect: true,
    info: 't.isFalsy equals t.falsy',
  },
  {
    fn: equal(t.isEmpty, t.empty),
    expect: true,
    info: 't.isEmpty equals t.empty',
  },
  {
    fn: equal(t.isError, t.error),
    expect: true,
    info: 't.isError equals t.error',
  },
  {
    fn: equal(t.isIterable, t.iterable),
    expect: true,
    info: 't.isIterable equals t.iterable',
  },
  {
    fn: equal(t.isEmail, t.email),
    expect: true,
    info: 't.isEmail equals t.email',
  },
  { fn: equal(t.isNull, t.null), expect: true, info: 't.isNull equals t.null' },
  {
    fn: equal(t.isUndefinedOrNull, t.undefinedOrNull),
    expect: true,
    info: 't.isUndefinedOrNull equals t.undefinedOrNull',
  },
  {
    fn: equal(t.isBuffer, t.buffer),
    expect: true,
    info: 't.isBuffer equals t.buffer',
  },
  {
    fn: equal(t.isThenable, t.thenable),
    expect: true,
    info: 't.isThenable equals t.thenable',
  },
  {
    fn: equal(t.isArguments, t.arguments),
    expect: true,
    info: 't.isArguments equals t.arguments',
  },
  { fn: equal(t.isUUID, t.uuid), expect: true, info: 't.isUUID equals t.uuid' },
  {
    fn: equal(t.testType, t.type),
    expect: true,
    info: 't.testType equals t.type',
  },
  { fn: equal(t.test, t.types), expect: true, info: 't.test equals t.types' },
  {
    fn: equal(t.isEq, t.eq, t.is),
    expect: true,
    info: 't.isEq, t.eq equals t.is',
  },
  {
    fn: equal(t.isNot, t.not, t.isNeq, t.neq),
    expect: true,
    info: 't.isNot, t.not, t.isNeq equals t.neq',
  },
]

module.exports = fns
