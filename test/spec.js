const t = require('../src')

const types = [
  'array',
  'isArray',
  'boolean',
  'isBoolean',
  'defined',
  'isDefined',
  'function',
  'isFunction',
  'number',
  'isNumber',
  'integer',
  'isInteger',
  'float',
  'isFloat',
  'object',
  'isObject',
  'string',
  'isString',
  'rgba',
  'rgbaObject',
  'isRGBAObject',
  'rgb',
  'rgbObject',
  'isRGBObject',
  'hex',
  'hexColor',
  'isHexColor',
  'hex3',
  'hexColor3',
  'isHexColor3',
  'hex4',
  'hexColor4',
  'isHexColor4',
  'hex6',
  'hexColor6',
  'isHexColor6',
  'hex8',
  'hexColor8',
  'isHexColor8',
  'hexa',
  'hexAlphaColor',
  'isHexAlphaColor',
  'hexa4',
  'isHexa4',
  'isHexAlphaColor4',
  'hexa8',
  'isHexa8',
  'isHexAlphaColor8',
  'color',
  'isColor',
  'date',
  'isDate',
  'regexp',
  'regExp',
  'isRegExp',
  'truthy',
  'isTruthy',
  'falsy',
  'isFalsy',
  'empty',
  'isEmpty',
  'error',
  'isError',
  'iterable',
  'isIterable',
  'mail',
  'email',
  'isEmail',
  'nil',
  'null',
  'isNull',
  'undefined',
  'undefinedOrNull',
  'isUndefinedOrNull',
  'buffer',
  'isBuffer',
  'thenable',
  'isThenable',
  'arguments',
  'isArguments',
  'uuid',
  'isUUID',
  'type',
  'testType',
  'types',
  'test',
  'is',
  'eq',
  'isEq',
  'neq',
  'isNeq',
  'not',
  'isNot'
]

const compare = (a, b) => a.toString() !== b.toString()

const equal = (...a) => () => a.some(b => compare(a, b))

const fns = [
  {
    fn: () => Object.keys(t).filter(k => types.indexOf(k) === -1),
    expect: a => a.length === 0 || console.log('Missing Spec Tests', a),
    info: 'Number of test functions is equal to lib functions',
  },
  {
    fn: () => types.some(k => t.function(t[k])),
    info: 'All exposed fields are functions',
  },
  {
    fn: () => t.isArray.toString(),
    expect: t.array.toString(),
    info: 't.isArray equals t.array',
  },
  {
    fn: equal(t.isArray, t.array),
    info: 't.isArray equals t.array',
  },
  {
    fn: equal(t.isBoolean, t.boolean),
    expect: true,
    info: 't.isBoolean equals t.boolean',
  },
  {
    fn: equal(t.isDefined, t.defined),
    expect: true,
    info: 't.isDefined equals t.defined',
  },
  {
    fn: equal(t.isFunction, t.function),
    expect: true,
    info: 't.isFunction equals t.function',
  },
  {
    fn: equal(t.isNumber, t.number),
    expect: true,
    info: 't.isNumber equals t.number',
  },
  {
    fn: equal(t.isInteger, t.integer),
    expect: true,
    info: 't.isInteger equals t.integer',
  },
  {
    fn: equal(t.isFloat, t.float),
    expect: true,
    info: 't.isFloat equals t.float',
  },
  {
    fn: equal(t.isObject, t.object),
    expect: true,
    info: 't.isObject equals t.object',
  },
  {
    fn: equal(t.isString, t.string),
    expect: true,
    info: 't.isString equals t.string',
  },
  {
    fn: equal(t.isRGBAObject, t.rgbaObject),
    expect: true,
    info: 't.isRGBAObject equals t.rgbaObject',
  },
  {
    fn: equal(t.isRGBObject, t.rgbObject),
    expect: true,
    info: 't.isRGBObject equals t.rgbObject',
  },
  {
    fn: equal(t.isHexColor, t.hexColor, t.hex),
    expect: true,
    info: 't.isHexColor equals t.hexColor',
  },
  {
    fn: equal(t.isHexAlphaColor, t.hexAlphaColor, t.hexa),
    expect: true,
    info: 't.isHexAlphaColor equals t.hexAlphaColor',
  },
  {
    fn: equal(t.isColor, t.color),
    expect: true,
    info: 't.isColor equals t.color',
  },
  { fn: equal(t.isDate, t.date), expect: true, info: 't.isDate equals t.date' },
  {
    fn: equal(t.isRegExp, t.regExp, t.regexp),
    expect: true,
    info: 't.isRegExp, t.RegExp and t.regexp are equal',
  },
  {
    fn: equal(t.isTruthy, t.truthy),
    expect: true,
    info: 't.isTruthy equals t.truthy',
  },
  {
    fn: equal(t.isFalsy, t.falsy),
    expect: true,
    info: 't.isFalsy equals t.falsy',
  },
  {
    fn: equal(t.isEmpty, t.empty),
    expect: true,
    info: 't.isEmpty equals t.empty',
  },
  {
    fn: equal(t.isError, t.error),
    expect: true,
    info: 't.isError equals t.error',
  },
  {
    fn: equal(t.isIterable, t.iterable),
    expect: true,
    info: 't.isIterable equals t.iterable',
  },
  {
    fn: equal(t.isEmail, t.email),
    expect: true,
    info: 't.isEmail equals t.email',
  },
  { fn: equal(t.isNull, t.null), expect: true, info: 't.isNull equals t.null' },
  {
    fn: equal(t.isUndefinedOrNull, t.undefinedOrNull),
    expect: true,
    info: 't.isUndefinedOrNull equals t.undefinedOrNull',
  },
  {
    fn: equal(t.isBuffer, t.buffer),
    expect: true,
    info: 't.isBuffer equals t.buffer',
  },
  {
    fn: equal(t.isThenable, t.thenable),
    expect: true,
    info: 't.isThenable equals t.thenable',
  },
  {
    fn: equal(t.isArguments, t.arguments),
    expect: true,
    info: 't.isArguments equals t.arguments',
  },
  { fn: equal(t.isUUID, t.uuid), expect: true, info: 't.isUUID equals t.uuid' },
  {
    fn: equal(t.testType, t.type),
    expect: true,
    info: 't.testType equals t.type',
  },
  { fn: equal(t.test, t.types), expect: true, info: 't.test equals t.types' },
  {
    fn: equal(t.isEq, t.eq, t.is),
    expect: true,
    info: 't.isEq, t.eq equals t.is',
  },
  {
    fn: equal(t.isNot, t.not, t.isNeq, t.neq),
    expect: true,
    info: 't.isNot, t.not, t.isNeq equals t.neq',
  },
]

module.exports = fns
