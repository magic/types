import is from '../src/index.mjs'

const fns = {
  isArray: [
    { fn: () => is.isArray(['test', 'test2']), expect: true },
    { fn: () => is.isArr(['test', 'test2']), expect: true },
    { fn: () => is.array(['test', 'test2']), expect: true },
    { fn: () => is.arr(['test', 'test2']), expect: true },
    { fn: () => is.arr(['test']), expect: true },
    { fn: () => is.arr([]), expect: true },
    { fn: () => is.arr(1), expect: false },
    { fn: () => is.arr('string'), expect: false },
    { fn: () => is.arr(''), expect: false },
  ],
  isBoolean: [
    { fn: () => is.isBoolean(true), expect: true },
    { fn: () => is.isBool(true), expect: true },
    { fn: () => is.boolean(true), expect: true },
    { fn: () => is.bool(true), expect: true },
    { fn: () => is.bool(false), expect: true },
    { fn: () => is.bool(0), expect: false },
    { fn: () => is.bool(1), expect: false },
    { fn: () => is.bool('true'), expect: false },
  ],
  isFunction: [
    { fn: () => is.isFunction(() => {}), expect: true },
    { fn: () => is.isFunc(() => {}), expect: true },
    { fn: () => is.isFn(() => {}), expect: true },
    { fn: () => is.function(() => {}), expect: true },
    { fn: () => is.func(() => {}), expect: true },
    { fn: () => is.fn(() => {}), expect: true },
    { fn: () => is.fn(function () {}), expect: true },
    { fn: () => is.fn(0), expect: false },
    { fn: () => is.fn(true), expect: false },
    { fn: () => is.fn([1, 2, 3]), expect: false },
    { fn: () => is.fn({ t: 't' }), expect: false },
  ],
  isNumber: [
    { fn: () => is.isNumber(1), expect: true },
    { fn: () => is.isNum(1), expect: true },
    { fn: () => is.number(1), expect: true },
    { fn: () => is.num(1), expect: true },
    { fn: () => is.num(1.1), expect: true },
    { fn: () => is.num(Infinity), expect: true },
    { fn: () => is.num([1, 2, 3]), expect: false },
    { fn: () => is.num([]), expect: false },
    { fn: () => is.num({}), expect: false },
    { fn: () => is.num({ t: 't' }), expect: false },
    { fn: () => is.num('test'), expect: false },
    { fn: () => is.num('test'), expect: false },
  ],
  isInteger: [
    { fn: () => is.isInteger(1), expect: true },
    { fn: () => is.isInt(1), expect: true },
    { fn: () => is.integer(1), expect: true },
    { fn: () => is.int(1), expect: true },
    { fn: () => is.int(0), expect: true },
    { fn: () => is.int(1000), expect: true },
    { fn: () => is.int(1000.0), expect: true },
    { fn: () => is.int(1000.1), expect: false },
    { fn: () => is.int(1.1), expect: false },
    { fn: () => is.int(0.0), expect: true },
  ],
  isFloat: [
    { fn: () => is.isFloat(1.1), expect: true },
    { fn: () => is.float(1.1), expect: true },
    { fn: () => is.float(0.0), expect: true },
    { fn: () => is.float(1.0), expect: true },
    { fn: () => is.float(1000.1), expect: true },
    { fn: () => is.float(1), expect: true },
    { fn: () => is.float(0), expect: true },
    { fn: () => is.float('string'), expect: false },
    { fn: () => is.float([]), expect: false },
    { fn: () => is.float([1, 2, 3]), expect: false },
    { fn: () => is.float({}), expect: false },
    { fn: () => is.float({ t: 't' }), expect: false },
  ],
  isObject: [
    { fn: () => is.isObject([1, 2, 3]), expect: true },
    { fn: () => is.isObj([1, 2, 3]), expect: true },
    { fn: () => is.object([1, 2, 3]), expect: true },
    { fn: () => is.obj([1, 2, 3]), expect: true },
    { fn: () => is.isObject([]), expect: true },
    { fn: () => is.isObject({}), expect: true },
    { fn: () => is.isObject({ t: 't' }), expect: true },
    { fn: () => is.isObject(/test/), expect: true },
    { fn: () => is.isObject(new Date()), expect: true },
    { fn: () => is.isObject(new Error('test')), expect: true },
    { fn: () => is.isObject('test'), expect: false },
    { fn: () => is.isObject(0), expect: false },
    { fn: () => is.isObject(new Date().getTime()), expect: false },
  ],
  isString: [
    { fn: () => is.isString('test'), expect: true },
    { fn: () => is.isStr('test'), expect: true },
    { fn: () => is.string('test'), expect: true },
    { fn: () => is.str('test'), expect: true },
    { fn: () => is.isString(''), expect: true },
    { fn: () => is.isString('true'), expect: true },
    { fn: () => is.isString('m@m.m'), expect: true },
    { fn: () => is.isString(0), expect: false },
    { fn: () => is.isString(1.2), expect: false },
    { fn: () => is.isString([]), expect: false },
    { fn: () => is.isString({}), expect: false },
    { fn: () => is.isString(new Error('test')), expect: false },
  ],
  isNull: [
    { fn: () => is.isNull(null), expect: true },
    { fn: () => is.isNil(null), expect: true },
    { fn: () => is.null(null), expect: true },
    { fn: () => is.nil(null), expect: true },
    { fn: () => is.isNull(null), expect: true },
    { fn: () => is.isNull(false), expect: false },
    { fn: () => is.isNull(undefined), expect: false },
    { fn: () => is.isNull(), expect: false },
    { fn: () => is.isNull([]), expect: false },
    { fn: () => is.isNull({}), expect: false },
    { fn: () => is.isNull(0), expect: false },
  ],
  isUndefinedOrNull: [
    { fn: () => is.isUndefinedOrNull(null), expect: true },
    { fn: () => is.undefinedOrNull(null), expect: true },
    { fn: () => is.isUndefinedOrNull(undefined), expect: true },
    { fn: () => is.isUndefinedOrNull(), expect: true },
    { fn: () => is.isUndefinedOrNull([]), expect: false },
  ],

  isError: [
    { fn: () => is.isError(new Error('test')), expect: true },
    { fn: () => is.error(new Error('test')), expect: true },
    { fn: () => is.err(new Error('test')), expect: true },
    { fn: () => is.isError(0), expect: false },
    { fn: () => is.isError('error'), expect: false },
    { fn: () => is.isError('test'), expect: false },
    { fn: () => is.isError({}), expect: false },
    { fn: () => is.isError([]), expect: false },
  ],
  isDate: [
    { fn: () => is.isDate(new Date()), expect: true },
    { fn: () => is.date(new Date()), expect: true },
    { fn: () => is.time(new Date()), expect: true },
    { fn: () => is.isDate(new Date().getTime()), expect: false },
    { fn: () => is.isDate('test'), expect: false },
    { fn: () => is.isDate(123), expect: false },
  ],
  isRegExp: [
    { fn: () => is.isRegExp(/test/), expect: true },
    { fn: () => is.regExp(/test/), expect: true },
    { fn: () => is.regexp(/test/), expect: true },
    { fn: () => is.regex(/test/), expect: true },
    { fn: () => is.isRegExp(new RegExp()), expect: true },
    { fn: () => is.isRegExp('test'), expect: false },
    { fn: () => is.isRegExp(0), expect: false },
    { fn: () => is.isRegExp([]), expect: false },
  ],
}

export default fns
