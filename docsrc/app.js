module.exports = {
  state: {
    logotext: '@magic/types',
    title: '@magic/types',
    description: 'typechecking utilities for node.',
    menu: [
      { to: '/#install', text: 'install' },
      { to: '/#require', text: 'require' },
      { to: '/#import-single-function', text: 'import single function' },
      { to: '/#import-all-functions', text: 'import all functions' },
      {
        to: '/#functions',
        text: 'functions',
        items: [
          { to: '/#functions-is', text: 'is' },
          { to: '/#functions-not', text: 'not' },
          { to: '/#functions-test', text: 'test' },
          { to: '/#functions-testtype', text: 'testType' },
          { to: '/#functions-type-compare', text: 'type comparisons' },
          { to: '/#functions-array', text: 'isArray' },
          { to: '/#functions-boolean', text: 'isBoolean' },
          { to: '/#functions-defined', text: 'isDefined' },
          { to: '/#functions-undefined', text: 'isUndefined' },
          { to: '/#functions-function', text: 'isFunction' },
          { to: '/#functions-number', text: 'isNumber' },
          { to: '/#functions-integer', text: 'isInteger' },
          { to: '/#functions-float', text: 'isFloat' },
          { to: '/#functions-object', text: 'isObject' },
          { to: '/#functions-string', text: 'isString' },
          { to: '/#functions-rgbaobject', text: 'isRGBAObject' },
          { to: '/#functions-rgbobject', text: 'isRGBObject' },
          { to: '/#functions-hexcolor', text: 'isHexColor' },
          { to: '/#functions-hexalphacolor', text: 'isHexAlphaColor' },
          { to: '/#functions-color', text: 'isColor' },
          { to: '/#functions-date', text: 'isDate' },
          { to: '/#functions-regexp', text: 'isRegExp' },
          { to: '/#functions-truthy', text: 'isTruthy' },
          { to: '/#functions-falsy', text: 'isFalsy' },
          { to: '/#functions-empty', text: 'isEmpty' },
          { to: '/#functions-error', text: 'isError' },
          { to: '/#functions-iterable', text: 'isIterable' },
          { to: '/#functions-email', text: 'isEmail' },
          { to: '/#functions-null', text: 'isNull' },
          { to: '/#functions-undefinedornull', text: 'isUndefinedOrNull' },
          { to: '/#functions-buffer', text: 'isBuffer' },
          { to: '/#functions-promise', text: 'isPromise' },
          { to: '/#functions-arguments', text: 'isArguments' },
          { to: '/#functions-uuid', text: 'isUUID' },
          { to: '/#functions-eq', text: 'isEq' },
          { to: '/#functions-not', text: 'isNot' },
          { to: '/#functions-deepequal', text: 'isDeepEqual' },
          { to: '/#functions-deepdifferent', text: 'isDeepDifferent' },
        ],
      },

      { to: '/#source', text: 'source' },
    ],
  },
}
